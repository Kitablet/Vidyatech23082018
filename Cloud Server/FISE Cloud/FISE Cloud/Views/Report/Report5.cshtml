@using FISE_Cloud.Models;
@model Report5FilterModel
@{
    ViewBag.Title = "Report 5";
    ViewBag.HeaderPageTitle = "Reports";

    FISE_Cloud.Services.Authentication.UserData _Userdata = null;
    var IsUserAuthenticated = FISEAuthenticationService.IsUserAuthenticated;
    if (IsUserAuthenticated)
    {
        _Userdata = FISEAuthenticationService.CurrentUserData;
    }
}

<style>
    
    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .bar {
        fill: steelblue;
    }

    .x.axis path {
        display: none;
    }

    .barstext {
        font-size: 18px;
        color: #CCCCCC;
    }

    .tick text {
        font-size: 18px;
        color: #CCCCCC;
    }
    .field-validation-error {
        display:none;
        position:static;
    }
</style>

<script src="~/Scripts/d3.min.js?v=1"></script>
<script>
    function RenderBarChart(id, datastring,color1,color2) {        
        var margin = { top: 20, right: 10, bottom: 60, left: 10 },
            width = 944 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var x0 = d3.scale.ordinal()
            .rangeRoundBands([0, width], 0.4);

        var x1 = d3.scale.ordinal();

        var y = d3.scale.linear()
            .range([height, 0]);

        var color = d3.scale.ordinal()
                    .range([color1, color2]);
        var xAxis = d3.svg.axis()
            .scale(x0)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .tickFormat(d3.format(".2s"));

        var svg = d3.select("#" + id).append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var data = d3.csv.parse(datastring);
        var ageNames = d3.keys(data[0]).filter(function (key) { return key !== "Grade"; });

        data.forEach(function (d) {
            d.ages = ageNames.map(function (name) { return { name: name, value: +d[name] }; });
        });

        x0.domain(data.map(function (d) { return d.Grade; }));
        x1.domain(ageNames).rangeRoundBands([0, x0.rangeBand()]);
        y.domain([0, d3.max(data, function (d) { return d3.max(d.ages, function (d) { return d.value; }); })]);



        var grade = svg.selectAll(".grade")
            .data(data)
          .enter().append("g")
            .attr("class", "g")
            .attr("transform", function (d) { return "translate(" + (x0(d.Grade)) + ",0)"; });



        grade.selectAll("rect")
            .data(function (d) { return d.ages; })
              .enter().append("rect")
              .attr("class", "bars")
            .attr("width", x1.rangeBand())
            .attr("x", function (d) { return x1(d.name); })
            .attr("y", function (d) { return y(d.value); })
            .attr("height", function (d) { return height - y(d.value); })
            .style("fill", function (d) { return color(d.name); });

        grade.selectAll("text")
        .data(function (d) { return d.ages; })
              .enter().append("text")
              .attr("class", "barstext")
              .attr("x", -410)
              .attr("y", function (d, i) { return (i * x1.rangeBand()) + (x1.rangeBand() / 2) + 5; })
              .attr("transform", "rotate(-90)")
              .text(function (d) { return d.value });


        grade.append("text")
                .attr("class", "barstext")
                .attr("transform", "translate(0," + (height + 10) + ")")
                .attr("dy", 1)
                .text(function (d) { return d.Grade }).call(wrap, 80);
    }
    function wrap(text, width) {
        text.each(function () {
            var text = d3.select(this),
            words = text.text().split(/\s+/).reverse(),
            word,
            line = [],
            lineNumber = 0,
            y = text.attr("y"),
            dy = parseFloat(text.attr("dy")),
            lineHeight = 1.1, // ems
            tspan = text.text(null).append("tspan").attr("x", function (d) { return d.children || d._children ? -10 : 10; }).attr("y", y).attr("dy", dy + "em");
            while (word = words.pop()) {
                line.push(word);
                tspan.text(line.join(" "));
                var textWidth = tspan.node().getComputedTextLength();
                if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    ++lineNumber;
                    tspan.attr("x", function (d) { return d.children || d._children ? -10 : 8; }).attr("y", y).attr("dy", dy + "em");
                    tspan = text.append("tspan").attr("x", function (d) { return d.children || d._children ? -10 : 5; }).attr("y", 0).attr("dy", lineNumber * lineHeight + dy + "em").text(word);
                }
                else {
                    tspan.attr("x", function (d) { return d.children || d._children ? -10 : 0; }).attr("y", y).attr("dy", dy + "em");
                }
            }
        });
    }

</script>

<div class="row title-section">
    <div>
        @if (Html.MvcSiteMap().SiteMap.CurrentNode != Html.MvcSiteMap().SiteMap.RootNode)
        {
            @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
        }
    </div>

    <div class="col-xs-12">
        <h4 class="page-title">
@if (_Userdata != null && !_Userdata.Role.Equals("schooladmin", StringComparison.InvariantCultureIgnoreCase))
        {
            @Resource.Reports_Report5_Title
}
else { 
    @Resource.Reports_Report5_Title_SchoolAdmin
    ViewBag.Title = "Report 4";
}
            <span id="selected-duration"></span>
            <a class="exporttoexcel" id="report5_exptoexcel" onclick="return ExportReport5();" title="@Resource.Export_Reports_Report5"></a>
        </h4>
    </div>
</div>
<hr />
@using (Html.BeginForm("ExportReport5", "Report", FormMethod.Post, new { id = "filter-selected-items-toexport-form" }))
{
    <input type="hidden" id="gradeexport" name="gradeexport" value="" />
    <input type="hidden" id="schoolexport" name="schoolexport" value="" />
    <input type="hidden" id="durationexport" name="durationexport" value="" />
    <input type="hidden" id="cityexport" name="cityexport" value="" />
    <input type="hidden" id="monthexport" name="monthexport" value="" />
    <input type="hidden" id="yearexport" name="yearexport" value="" />
}
@using (Ajax.BeginForm("Report5", "Report", null, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "data", OnBegin = "onBegin", OnComplete = "onComplete" }, new { id = "filterForm" }))
{
    <span id="modifyfilter_link" class="accordion_plus">@Resource.Reports_ModifyFiltersandRegenerateReport</span>

    <div id="filter_accordion" class="collapse in">
        <div class="row reportfilter-row">
            <div class="col-xs-12"><p class="report_subtitle">@Resource.Reports_SelectDuration</p></div>
            <div class="col-xs-12 reportfilter_radio">
                <div class="col-xs-2">
                    <input type="radio" id="duration" name="duration" value="a-month" dropdown="amonth" />
                    <label class="report-radio-label">@Resource.Reports_SelectDuration_Amonth</label>
                </div>
                <div class="col-xs-2">
                    @Html.DropDownList("year",
                Enumerable.Range(2010, DateTime.Now.Year + 1 - 2010).
                Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }),
                "Select Year", new { @class = "amonth", id = "myear" })
                    <span class="report-error" data-valmsg-replace="true">@Resource.Report_YearReq_Error</span>
                </div>
                <div class="col-xs-offset-1 col-xs-2">
                    @{IEnumerable<Month>
                month = Enum.GetValues(typeof(Month)).Cast<Month>();
                    }
                    @Html.DropDownList("month",
            month.Select(i => new SelectListItem { Value = ((int)i).ToString(), Text = i.ToString() }),
            "Select Month", new { @class = "amonth", id = "mmonth" })
                    <span class="report-error" data-valmsg-replace="true">@Resource.Report_MonthReq_Error</span>
                </div>
            </div>
            <div class="col-xs-12 reportfilter_radio">
                <div class="col-xs-2">
                    <input type="radio" id="duration" name="duration" value="a-quarter" dropdown="aquarter" />
                    <label class="report-radio-label">@Resource.Reports_SelectDuration_Aquarter</label>
                </div>
                <div class="col-xs-2">
                    @Html.DropDownList("year",
                    Enumerable.Range(2010, DateTime.Now.Year + 1 - 2010).
                Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }),
         "Select Year", new { @class = "aquarter", id = "qyear" })
                    <span class="report-error" data-valmsg-replace="true">@Resource.Report_YearReq_Error</span>
                </div>
                <div class="col-xs-offset-1 col-xs-2">
                    @{IEnumerable<Quarter>
                quarter = Enum.GetValues(typeof(Quarter)).Cast<Quarter>();
                    }

                    @Html.DropDownList("month",
                quarter.
                Select(i => new SelectListItem { Value = ((int)i).ToString(), Text = i.ToString() }),
                "Select Month", new { @class = "aquarter", id = "qmonth" })
                    <span class="report-error" data-valmsg-replace="true">@Resource.Report_MonthReq_Error</span>
                </div>
            </div>
            <div class="col-xs-12 reportfilter_radio">
                <div class="col-xs-2">
                    <input type="radio" id="duration" name="duration" value="a-year" dropdown="ayear" />
                    <label class="report-radio-label">@Resource.Reports_SelectDuration_Ayear</label>
                </div>
                <div class="col-xs-2">
                    @Html.DropDownList("year",
                Enumerable.Range(2010, DateTime.Now.Year + 1 - 2010).
                Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }),
                "Select Year", new { @class = "ayear", id = "ayear" })
                    <span class="report-error" data-valmsg-replace="true">@Resource.Report_YearReq_Error</span>
                </div>
            </div>
            <div class="col-xs-12">
                <div class="col-xs-2">
                    <input type="radio" id="duration" name="duration" value="a-year-to-date" dropdown="a-year-to-date" checked />
                    <label class="report-radio-label">@Resource.Reports_SelectDuration_Ayeartodate</label>
                    <span class="field-validation-error">@Resource.Reports_SelectDuration_ValidationErrMsg</span>
                </div>
            </div>
        </div>

        @if (_Userdata != null && !_Userdata.Role.Equals("schooladmin", StringComparison.InvariantCultureIgnoreCase))
        {
            <div class="row reportfilter-row">
                <div class="col-xs-2"><p class="report_subtitle">@Resource.Reports_SelectLocation</p></div>
                <div class="col-xs-2">


                    @Html.DropDownList("city",
            Model.Cities.
            Select(i => new SelectListItem { Value = i.ToString().Replace(" ", ""), Text = i.ToString() }),
                  "Select a City", new { onchange = "citychange(this);" })
                </div>
            </div>

            <div class="row reportfilter-row">
                <div class="col-xs-2"><p class="report_subtitle">@Resource.Reports_SelectSchool</p></div>
                <div class="col-xs-2">

                    <select id="school" name="school">
                        <option value="">Select A School </option>
                        @foreach (var item in Model.Schools)
                        {
                            <option value="@item.SchoolId" city="@item.City.Replace(" ","")">@item.SchoolName</option>
                        }
                    </select>
                    <span class="report-error" id="school-error" data-valmsg-replace="true">@Resource.Report_School_Req</span>
                </div>
            </div>
        }
        else
        {
            <select name="school" style="display:none;">
                @foreach (var item in Model.Schools)
                {
                    <option value="@item.SchoolId" city="@item.City.Replace(" ","")">@item.SchoolName</option>
                }
            </select>
        }
        <div class="row reportfilter-row">
            <div class="col-xs-12"><p class="report_subtitle">@Resource.Reports_SelectGrades</p></div>
            <div class="col-xs-12">
                <div class="col-xs-12">
                    <input type="checkbox" id="selectall_grade" value="All" checked />
                    <span class="filter_checkboxlabel">@Resource.checkbox_SelectAll</span>
                </div>
                <hr class="hr_report" />
                @foreach (var item in Model.Grades)
                {
                    <div class="col-xs-12 reportfilter_check">
                        <input type="checkbox" name="grade" value="@item.Id" />
                        <span class="filter_checkboxlabel">Grade @item.Name</span>
                    </div>
                }
            </div>
        </div>
        <div class="buttons">
            <input type="submit" class="btn btn-default btn-rect" value="@Resource.Reports_btn_GenerateReport" data-toggle="collapse" data-target="#filter_accordion" id="btn_GenerateReport" />
        </div>
    </div>

    <div id="data">

    </div>
}
@section scripts {

    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js?v=1"></script>
    <script>
        var schools = [];
        $(document).ready(function () {

            $('#school option').slice(1, $('#school option').length).each(function () {
                schools.push({ schoolid: $(this).attr('value'), schoolname: $(this).text(), city: $(this).attr('city') });
            });
            $('.ayear,.amonth,.aquarter').attr('disabled', true);

            $('.ayear,.amonth,.aquarter').attr('disabled', true);
            $('.book').slice(10, $('.book').length).hide();

            $('#selectall_grade').click(function () {
                $('[name=grade]').prop('checked', false);
                $('#selectall_grade').prop('checked', true);
            });

            $('[name=grade]').click(function () {

                if ($('input:checkbox[name=grade]').length == $('input:checkbox[name=grade]:checked').length) {
                    $('[name=grade]').prop('checked', false);
                    $('#selectall_grade').prop('checked', true);
                }
                else if ($('input:checkbox[name=grade]:checked').length == 0) {
                    $('#selectall_grade').prop('checked', true);
                }
                else {
                    $('#selectall_grade').prop('checked', false);
                }
            });

            $('[name$=duration]').click(function () {
                $('.ayear,.amonth,.aquarter').attr('disabled', true);
                $('.ayear,.amonth,.aquarter').css('opacity', 0.5);
                $('.' + $(this).attr('dropdown')).attr('disabled', false);
                $('.' + $(this).attr('dropdown')).css('opacity', 1);
                $('span.field-validation-error').css('display', 'none');
            });

            $('#btn_GenerateReport').click(function () {
                var result = true;
                if ($('[name$=duration]:checked').length == 0) {
                    $('span.field-validation-error').css('display', 'block');
                    $('html, body').animate({ scrollTop: 0 }, 500);
                    return false;
                }
                else {
                    var attr = $('[name$=duration]:checked').attr('dropdown');
                    $('.report-error').hide();
                    $('.' + attr).each(function () {
                        if ($(this).val() == '') {
                            $(this).siblings('.report-error').show();
                            result = false;
                            $('html, body').animate({ scrollTop: 0 }, 500);
                        }
                    });
                }
                if ($('#school').val() == '') {
                    $('#school-error').show();
                    result = false;
                }
                else
                    $('#school-error').hide();
                return result;
            });


        });

        function citychange(ctrl) {
            $('#school').html('');
            $('#school').append('<option value="">Select a School</option>');
            $.each(schools, function (index, val1) {
                
                if ($(ctrl).val() == '' || $(ctrl).val() == val1.city) {
                    $('#school').append('<option value="' + val1.schoolid + '" city="' + val1.city + '">' + val1.schoolname + '</option>');
                }
            });
        }

        var report_Timeline = "";
        $('#filter_accordion').on('hidden.bs.collapse', function () {
            $('span#modifyfilter_link').show();
            $('#data').show();
            $('#accordion_group').show();
            $('#report5_exptoexcel').css('display', 'inline-flex');
            var attr = $('[name$=duration]:checked').attr('dropdown');
            if (attr == "amonth")
                report_Timeline = "For " + $('#mmonth').children(':selected').text().substring(0, 3) + " " + $('#myear').val().toString();
            else if (attr == "aquarter") {
                var quarter = $('#qmonth').children(':selected').text();
                var Q = 0;
                if (quarter.toLowerCase() == "first") { Q = 1; } else if (quarter.toLowerCase() == "second") { Q = 2; } else if (quarter.toLowerCase() == "third") { Q = 3; } else if (quarter.toLowerCase() == "fourth") { Q = 4; }
                report_Timeline = "For Q" + Q + " " + $('#qyear').val().toString();
            }
            else if (attr == "ayear")
                report_Timeline = "For " + $('#ayear').val().toString();
            else if (attr == "a-year-to-date")
                report_Timeline = "For " + "@Resource.Reports_Ayeartodate";
            $("span#selected-duration").html("");
            $("span#selected-duration").html(report_Timeline);
        });

        $('span#modifyfilter_link').click(function () {
            $('span#modifyfilter_link').hide();
            $('#filter_accordion').addClass("in");
            $('#filter_accordion').css('height', 'auto');
        });

        function onBegin() {
            displayAjaxLoading(true);
        }
        function onComplete(jqXHR, textStatus, err) {
            
            if (jqXHR.status == 401) {
                //refresh the page, as we are not longer authorized
                location.reload();
            }
            displayAjaxLoading(false);
            $('html, body').animate({ scrollTop: 0 }, 500);
        }

        function ExportReport5() {
            var attr = $('[name$=duration]:checked').attr('dropdown');
            var val = $('[name$=duration]:checked').val();
            var time = [{ time: '0' }, { time: '0' }]
            $('.' + attr).each(function (index, value) {
                time[index].time = $(this).val();
            });

            var gradeids = [];
            $('[name=grade]:checked').each(function () {
                gradeids.push($(this).val());
            });

            $('#gradeexport').val(gradeids.join(','));
            $('#schoolexport').val($('#school').val());
            $('#durationexport').val(val);
            $('#monthexport').val(time[1].time);
            $('#yearexport').val(time[0].time);
            if ($('#school').val() == '') {
                $('#school-error').show();
                result = false;
            }
            else {
                $('#school-error').hide();
                $('#filter-selected-items-toexport-form').submit();
            }
            return false;
        }
    </script>
}
