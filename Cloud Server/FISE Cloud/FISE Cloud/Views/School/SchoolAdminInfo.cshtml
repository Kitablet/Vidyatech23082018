@using FISE_Cloud.Models;
@model UserRegistrationModel
@{
    ViewBag.Title = "School Admin Info";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.HeaderPageTitle = "Schools";
}
@{
    var SchoolUId = ViewContext.RouteData.Values["schooluid"];
}


<div class="row title-section">
    <div>
        @if (Html.MvcSiteMap().SiteMap.CurrentNode != Html.MvcSiteMap().SiteMap.RootNode)
        {
            @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
        }
    </div>

    <h4 class="page-title">@Model.FirstName @Model.LastName</h4>
    <div class="float-right">
        <h4 class="role-title">@Resource.Schooladmin_schooladmin</h4>
    </div>
    <div class="popup_background"></div>
    <div id="partialview">
        <div class="form-group">
            <div id="divclose" onclick="return ClosePoUp()">X</div>
        </div>

        <h5 class="page-title">@Resource.Btn_ResendRegistrationMail</h5>
        <hr>
        <div class="popup-desc" id="popupdesc1">@Resource.ResendEmailMessage1  <span id="lastsenddate"></span></div>
        <div class="popup-desc" id="popupdesc2">@Resource.ResendEmailMessage2&nbsp;@Resource.Btn_ResendRegistrationMail.ToLower()?</div>
        <div class="form-group buttons" style="margin-top:10px;">
            <a class="btn btn-default btn-rect" onclick="resenduserregmail(@Model.UserId)">YES</a>
            <a class="btn btn-default btn-rect" onclick="return ClosePoUp();">NO</a>
        </div>

    </div>
</div>
<hr />
<div class="form-horizontal">

    @Html.HiddenFor(model => model.UserId)
    @if (string.IsNullOrWhiteSpace(Model.RegistrationDate.ToString()))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, "Mobile:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.MobileNumber)
            </span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, "Email:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.Email)
            </span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CreationDate, "Creation Date:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Model.CreationDate.ToString("dd.MM.yyyy")
            </span>
        </div>

        <div class="col-xs-offset-3 buttons">
            <input type="button" class="btn btn-default btn-rect" name="edit" value="@Resource.Btn_Modify" onclick="window.location.href='@Url.RouteUrl("EditSchoolAdmin", new { adminid=Model.UserId})';" />
            <input type="button" id="disable-admin" class="btn btn-default btn-rect" name="remove" value="@(Model.IsTrashed ? @Resource.Btn_Enable : @Resource.Btn_Disable )" onclick="confirmDisable(@Model.UserId, this.id)" />
            <input type="submit" class="btn btn-default btn-rect" name="resend-mail" value="@Resource.Btn_ResendRegistrationMail" onclick="OpenPopUp(@Model.UserId)" />

        </div>
    }
    else
    {
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, "First Name:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.FirstName)
            </span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, "Last Name:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.LastName)
            </span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, "Mobile:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.MobileNumber)
            </span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, "Email:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.Email)
            </span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Gender, "Gender:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.Gender)
            </span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreationDate, "Creation Date:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Model.CreationDate.ToString("dd.MM.yyyy")
            </span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RegistrationDate, "Registration Date:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">

                @(string.IsNullOrWhiteSpace(Model.RegistrationDate.ToString()) ? "--" : string.Format("{0:dd.MM.yyyy}", Model.RegistrationDate))
            </span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, "Status:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @if (!(Model.Status) && Model.IsTrashed)
                {
                    @Html.Raw(Resource.Status_Disabled);
                }
                else if (Model.Status && !(Model.IsTrashed) && Model.LastLoginDate != null)
                {
                    @Html.Raw(Resource.Status_Active);
                }
                else if (Model.Status && !(Model.IsTrashed) && Model.LastLoginDate == null)
                {
                    @Html.Raw(Resource.Status_Registered);
                }
                else if (!(Model.Status) && !(Model.IsTrashed) && Model.LastLoginDate == null)
                {
                    @Html.Raw(Resource.Status_Created);
                }
            </span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Username, "UserName:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="col-xs-9 control-label">
                @Html.DisplayFor(model => model.Username)

            </span>
        </div>

        <div class="col-xs-offset-3 buttons">

            <input type="button" class="btn btn-default btn-rect" name="edit" value="@Resource.Btn_Modify" onclick="window.location.href='@Url.RouteUrl("EditSchoolAdmin", new { adminid=Model.UserId})';" />
            <input type="button" id="disable-admin" class="btn btn-default btn-rect" name="remove" value="@(Model.IsTrashed ? @Resource.Btn_Enable : @Resource.Btn_Disable )" onclick="confirmDisable(@Model.UserId, this.id)" />

        </div>
    }
</div>





@section scripts {
    <script type="text/javascript">
        function ClosePoUp() {
            $('#partialview').hide();
            $('.popup_background').css('display', 'none');
            return false;
        }
        function confirmDisable(UserId, elemid) {
            jsondata = { "adminid": UserId };

            if ($("#" + elemid).val().toLowerCase() == "disable") {
                var result = confirm("@Resource.Disable_ConfirmMsg");
            }
            else {
                var result = confirm("@Resource.Enable_ConfirmMsg");
            }
            if (result) {
                $.ajax({
                    url: '@Url.Action("DisableSchoolAdmin", "School")',
                    type: 'POST',
                    async: false,
                    data: jsondata,
                    dataType: 'json',
                    success: function (result) {
                        if (result.Status == 1) {
                            window.location.href = window.location.href;
                        }
                        else if (result.Status == 2) {
                            alert("@Resource.SchoolAdminInfo_LastAdminDelNotAllowed")
                        }
                    },
                    error: function (jqXHR, textStatus, err) {
                        if (jqXHR.status == 401) {
                            //refresh the page, as we are not longer authorized
                            location.reload();
                        }
                    }
                });
            }
            else {
                return false;
            }
        }

        function OpenPopUp(UserId) {
            $.ajax({
                url: '@Url.Action("GetLastEmailSendDate", "School")?UserId=' + UserId + '&Type=SchoolAdminRegistration',
                type: 'Get',
                async: false,
                success: function (result) {
                    if (result == '') {
                        $('#popupdesc1').hide();
                    }
                    else {
                        $('#lastsenddate').text(result);
                        $('#popupdesc1').show();
                    }
                    $('#partialview').show();
                    $('.popup_background').css('display', 'block');
                },
                error: function (jqXHR, textStatus, err) {
                    if (jqXHR.status == 401) {
                        location.reload();
                    }
                }
            });
        }

        function resenduserregmail(userid) {
            jsondata = { "userid": userid };
            $.ajax({
                url: '@Url.Action("ResendUserRegistrationMail", "School")',
                type: 'POST',
                async: false,
                data: jsondata,
                dataType: 'json',
                success: function (result) {
                    ClosePoUp();
                    if (result.Status == 1 || result.Status == 2) {
                        alert("@Resource.RegistrationMail_Success");
                    }
                    else if (result.Status == 3) {
                        alert("@Resource.RegistrationMail_NoUser");
                    }
                    else {
                        alert("@Resource.RegistrationMail_ErrorMailNotSent");
                    }
                },
                error: function (jqXHR, textStatus, err) {
                    if (jqXHR.status == 401) {
                        //refresh the page, as we are not longer authorized
                        location.reload();
                    }
                }
            });
        }
    </script>
}

<style>
    #popupdesc1 {
    padding:12px 0;
    }
     #partialview {
        border: solid;
    }

    table td, table th {
        min-width: 100px;
        border: solid 1px black;
    }

    #partialview {
        border: none;
        z-index: 99999;
        position: absolute;
        background: white;
        opacity: 1;
        top: 13%;
        /*left: 31%;*/ left: 30%;
        padding: 10px 40px;
        display: none;
        width: 380px;
        font-size: 14px;
        font-family: Roboto-Regular;
        display:none;
    }

    .modal1 {
        position: fixed;
        font-family: Arial, Helvetica, sans-serif;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba(0,0,0,0.8);
        z-index: 99999;
        opacity: 0;
        -webkit-transition: opacity 400ms ease-in;
        -moz-transition: opacity 400ms ease-in;
        transition: opacity 400ms ease-in;
        pointer-events: none;
    }

    #divclose {
        float: right;
        cursor: pointer;
        color: #FC654C;
        width: 4px;
        font-size: 30px;
    }

    .popup-desc {
        margin-top: -8px;
        font-size: 14px;
    }
</style>