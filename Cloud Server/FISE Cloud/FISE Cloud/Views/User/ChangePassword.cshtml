@using FISE_Cloud.Models;
@model ChangePasswordModel

@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.HeaderPageTitle = "Profile";
}

<div class="row title-section">
    <div>
        @if (Html.MvcSiteMap().SiteMap.CurrentNode != Html.MvcSiteMap().SiteMap.RootNode)
        {
            @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
        }
    </div>
    <h4 class="page-title">@Resource.ChangePassword_pageTitle</h4>
</div>
<hr />

<div class="row">
    @if (!String.IsNullOrEmpty(Model.Result) && ViewData.ModelState.IsValid)
    {
        @Html.Raw(@HttpUtility.HtmlDecode(@Model.Result))
        <br />
        <br />
        <input type="button" class="btn btn-default btn-rect" onclick="location.href ='@Url.RouteUrl("UserProfileInfo")'" value="@Resource.btn_Continue" />
    }
    else
    {
        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="message-error">
                @if (!ViewData.ModelState.IsValid)
                {
                    <div> @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationSummary(true).ToHtmlString())) </div>
                }
            </div>

            <div class="form-group col-xs-12 remove_padding">
                <div class="col-xs-3">

                    @Html.LabelFor(model => model.OldPassword, "Current Password:", new { })
                </div>
                <span class="col-xs-9 inline2 changepassword">
                    @Html.EditorFor(model => model.OldPassword)

                    @Html.ValidationMessageFor(model => model.OldPassword)
                </span>
            </div>
            <div class="form-group col-xs-12">
                <div class="col-xs-3">

                    @Html.LabelFor(model => model.NewPassword, new { }, ":")
                </div>
                <span class="col-xs-9 inline2 changepassword">
                    @Html.EditorFor(model => model.NewPassword)

                    @Html.ValidationMessageFor(model => model.NewPassword)
                </span>
            </div>
            <div class="form-group col-xs-12">
                <div class="col-xs-3">

                    @Html.LabelFor(model => model.ConfirmNewPassword, "Repeat New Password:", new { })
                </div>
                <span class="col-xs-9 inline2 changepassword">
                    @Html.EditorFor(model => model.ConfirmNewPassword)

                    @Html.ValidationMessageFor(model => model.ConfirmNewPassword)
                </span>
            </div>

                    <div class="col-xs-12">
                        <div class="col-xs-offset-3 buttons">
                            <input type="submit" id="chngpswd_btn" class="btn btn-default btn-rect" value="@Resource.Btn_Save" disabled />
                            <input type="button" value="@Resource.Btn_Cancel" class="btn btn-default btn-rect" onclick="window.location.href = '@Url.RouteUrl("UserProfileInfo")';" />
                        </div>
                    </div>


        }

    }
</div>

<style>
    .error {
        color: #FC654C;
        font-size: 12px;
    }

    label.error {
        text-transform: none;
    }
</style>
<script src="~/Scripts/jquery.validate.js?v=1"></script>

<script>
    $(document).ready(function () {
        $('input[type=password]').each(function () {
            if ($(this).val().trim() != '')
                $(this).addClass('valid');
        });
        $.validator.addMethod('validatepassowrd', function (value, element) {
            var expr = /(?=.*[a-zA-Z])(?=.*[0-9])(?=.*?[!@@#$%^&*()])(?!.* )(?!.*?[></?';:}{\\|\"`~]).{8,100}/;
            return expr.test(value);
        }, '@Resource.UserRegistration_PwdValidator');

        $.validator.addMethod('oldnewpasswordcheck', function (value, element) {
            return $('#OldPassword').val().trim() == $('#NewPassword').val().trim() ? false : true;
        }, '@Resource.ChangePasswordValidator_OldandNew_CannotMatch');

        var thevalidator = $.data($('form')[0], 'validator');
        $("input").on("input blur change keyup", function () {
            $(this).valid();
            if (($('.valid').length > 0 && $('.valid').length < 3) || $('input.error').length > 0)
                $('#chngpswd_btn').attr('disabled', true);
            else
                $('#chngpswd_btn').attr('disabled', false);
        });
    });
    $("form").validate({
        rules: {
            OldPassword: {
                rangelength: [8, 100],
                required: true,
                validatepassowrd: true
            },
            NewPassword: {
                rangelength: [8, 100],
                required: true,
                validatepassowrd: true,
                oldnewpasswordcheck: true
            },
            ConfirmNewPassword: {
                required: true,
                equalTo: "#NewPassword"
            }
        },

        messages: {
            OldPassword: {
                required: "@Resource.ChangePasswordValidator_OldPwdReq",
                rangelength: "@Resource.UserRegistration_PwdValidator"
            },
            NewPassword: {
                required: "@Resource.ChangePasswordValidator_NewPwdReq",
                rangelength: "@Resource.UserRegistration_PwdValidator"

            },
            ConfirmNewPassword: {
                required: "@Resource.UserRegistration_ConfirmPasswordReqError",
                rangelength: "@Resource.UserRegistration_PwdValidator",
                equalTo: "@Resource.ChangePasswordValidator_New_Confirm_Match"
            }
        },
        submitHandler: function (form) {
            $(form).find("input[type='submit']").attr('disabled', true);
            $(form).find("input[type='button']").attr('disabled', true);
            form.submit();
        },
        invalidHandler: function (event, validator) {

        }
    });
</script>