@using FISE_Cloud.Models;
@using CaptchaMvc.HtmlHelpers
@model PasswordRecoveryConfirmModel
@{
    ViewBag.Title = "Password Recovery Confirm";
    ViewBag.HeaderPageTitle = "New Password";
    var captcha = Html.Captcha(Resource.CaptchaTryAnother, Resource.CaptchaLable, 5, Resource.CaptchaReqError, true);
}


<div class="row title-section">
    <div class="desc">
        @Resource.PasswordRecoveryConfirm_DescriptiveText
    </div>
    <h4 class="page-title">@Resource.NewPassword_PageTitle</h4>
</div>
<hr />
<div class="col-xs-12">
    @if (!String.IsNullOrEmpty(Model.Result))
    {
        <div class="result">
            @Html.Raw(@HttpUtility.HtmlDecode(@Model.Result))
            <br />
            <br />
            <input type="button" class="btn btn-default btn-rect" onclick="location.href = '@Url.RouteUrl("HomePage")'" value="@Resource.btn_Continue" />
        </div>
    }
    else
    {
        if (!Model.SuccessfullyChanged)
        {
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-group col-xs-12">
                    <div class="col-xs-3">
                        @Html.LabelFor(model => model.Username, "Username:", new { @class = "prefilled_text" })
                    </div>
                    <span class="col-xs-9 inline2">
                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "prefilled_text", @readonly = "readonly" } })                      
                    </span>
                </div>

                <div class="form-group col-xs-12">
                    <div class="col-xs-3">

                        @Html.LabelFor(model => model.NewPassword, "New PAssword:", new { })
                    </div>
                    <span class="col-xs-9 inline2 reposition-validationerr">
                        @Html.EditorFor(model => model.NewPassword)

                        @Html.ValidationMessageFor(model => model.NewPassword)
                    </span>
                </div>
                    <div class="form-group col-xs-12">
                        <div class="col-xs-3">

                            @Html.LabelFor(model => model.ConfirmNewPassword, "Repeat New PAssword:", new { })
                        </div>
                        <span class="col-xs-9 inline2">
                            @Html.EditorFor(model => model.ConfirmNewPassword)

                            @Html.ValidationMessageFor(model => model.ConfirmNewPassword)
                        </span>
                    </div>
                        <div class="form-group col-xs-12">
                            <div class="col-xs-offset-3 captcha">
                                @captcha
                                @Html.ValidationMessage(@captcha.BuildInfo.InputElementId)
                            </div>
                        </div>

                        <div class="col-xs-12">
                            <div class="col-xs-offset-3 buttons">
                                <input type="submit" class="btn btn-default btn-rect" name="set-password" id="btnsubmit" disabled value="@Resource.PasswordRecoveryConfirm_btnvalue" />
                            </div>
                        </div>
            }
        }
    }
</div>


<style>
    .error {
        color: #FC654C;
        font-size: 12px;
    }

    label.error {
        text-transform: none;
    }
</style>
<script src="~/Scripts/jquery.validate.js?v=1"></script>

<script>
    $(document).ready(function () {

        if ($('#NewPassword').val().trim() != '')
            $('#NewPassword').addClass('valid');

        if ($('#ConfirmNewPassword').val().trim() != '')
            $('#ConfirmNewPassword').addClass('valid');

        if ($('input[name=CaptchaInputText]').val().trim() != '')
            $('input[name=CaptchaInputText]').addClass('valid');


        $.validator.addMethod('validatepassowrd', function (value, element) {
            var expr = /(?=.*[a-zA-Z])(?=.*[0-9])(?=.*?[!@@#$%^&*()])(?!.* )(?!.*?[></?';:}{\\|\"`~]).{8,100}/;
            return expr.test(value);
        }, '@Resource.UserRegistration_PwdValidator');

        var thevalidator = $.data($('form')[0], 'validator');
        $("input").on("input blur change keyup", function () {
            $(this).valid();
            if (($('.valid').length > 0 && $('.valid').length < 3) || $('input.error').length > 0)
                $('#btnsubmit').attr('disabled', true);
            else
                $('#btnsubmit').attr('disabled', false);
        });
    });
    $("form").validate({
        rules: {
            NewPassword: {
                rangelength: [8, 100],
                required: true,
                validatepassowrd: true
            },
            ConfirmNewPassword: {
                required: true,
                equalTo: "#NewPassword"
            },
            CaptchaInputText: {
                required: true
            }
        },

        messages: {
            NewPassword: {
                required: "@Resource.PasswordRecoveryConfirmValidator_NewPwdReq",
                rangelength: "@Resource.UserRegistration_PwdValidator",
            },
            ConfirmNewPassword: {
                required: "@Resource.PasswordRecoveryConfirmValidator_ConfirmPwdReq",
                equalTo: "@Resource.PasswordRecoveryConfirmValidator_New_Confirm_Match"
            },
            CaptchaInputText: {
                required: "@Resource.Captcha_Req"
            }
        },
        submitHandler: function (form) {
            $(form).find("input[type='submit']").attr('disabled', true);
            $(form).find("input[type='button']").attr('disabled', true);
            form.submit();
        },
        invalidHandler: function (event, validator) {          
        }
    });
</script>