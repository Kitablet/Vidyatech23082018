@model FISE_Cloud.Models.StudentProfile

@{
    ViewBag.Title = "Student Registration";
    ViewBag.HeaderPageTitle = "New User Activation";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row title-section">
        <div>
            @if (Html.MvcSiteMap().SiteMap.CurrentNode != Html.MvcSiteMap().SiteMap.RootNode)
            {
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
            }
        </div>
        <h4 class="page-title">@Model.FirstName @Model.LastName</h4>
    </div>
    <hr />
    if (!ViewData.ModelState.IsValid)
    {
        <div> @Html.Raw(HttpUtility.HtmlDecode(@Html.ValidationSummary(true).ToHtmlString())) </div>
    }
    <div class="form-horizontal">
        <div class="form-group col-xs-12">
            @Html.HiddenFor(model => model.UserId)
            @Html.LabelFor(model => model.FirstName, "First Name:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="control-label col-xs-9">
                @Model.FirstName
                @Html.HiddenFor(model => model.FirstName)
            </span>
        </div>

        <div class="form-group col-xs-12">

            @Html.LabelFor(model => model.LastName, "Last Name:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="control-label col-xs-9">
                @Model.LastName
                @Html.HiddenFor(model => model.LastName)
            </span>
        </div>

        <div class="form-group col-xs-12">
            @Html.LabelFor(model => model.Grade, "Grade:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="control-label col-xs-9">
                @Model.Grade
                @Html.HiddenFor(model => model.Grade)
            </span>
        </div>

        <div class="form-group col-xs-12">
            @Html.LabelFor(model => model.SchoolName, "School:", htmlAttributes: new { @class = "control-label col-md-3" })
            <span class="control-label col-md-9">
                @Html.DisplayFor(model => model.SchoolName)
                @Html.HiddenFor(model => model.SchoolName)
            </span>
        </div>
        <div class="form-group col-xs-12">
            @Html.LabelFor(model => model.SubscriptionStartDate, "Subscription Start Date:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="control-label col-xs-9">
                @(string.IsNullOrWhiteSpace(Model.SubscriptionStartDate.ToString()) ? "--" : string.Format("{0:dd.MM.yyyy}", Model.SubscriptionStartDate))
                @Html.HiddenFor(model => model.SubscriptionStartDate)
            </span>
        </div>

        <div class="form-group col-xs-12">
            @Html.LabelFor(model => model.SubscriptionEndDate, "Subscription End Date:", htmlAttributes: new { @class = "control-label col-xs-3" })
            <span class="control-label col-xs-9">
                @(string.IsNullOrWhiteSpace(Model.SubscriptionEndDate.ToString()) ? "--" : string.Format("{0:dd.MM.yyyy}", Model.SubscriptionEndDate))
                @Html.HiddenFor(model => model.SubscriptionEndDate)
            </span>
        </div>
        @if (string.IsNullOrEmpty(Model.RegistrationDate.ToString()))
        {
            <div class="form-group col-xs-12">

                @Html.LabelFor(model => model.Username, "Student User Name:", htmlAttributes: new { @class = "control-label col-xs-3" })

                <span id="div_user" class="col-xs-9 inline2 reposition-validationerr">
                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "txt_userid", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Username)
                    <label id="uniquusername-error" style="display: none; color: #FC654C; font-size: 12px; text-transform: none;">@Resource.UniqueUserName</label>
                </span>
            </div>

            <div class="form-group col-xs-12">

                @Html.LabelFor(model => model.Password, "Password:", htmlAttributes: new { @class = "control-label col-xs-3" })
                <span class="col-xs-9 inline2 reposition-validationerr">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Password)
                </span>
            </div>

            <div class="form-group col-xs-12">

                @Html.LabelFor(model => model.ConfirmPassword, "Repeat Password:", htmlAttributes: new { @class = "control-label col-xs-3" })
                <span class="col-xs-9 inline2">
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword)
                </span>
            </div>
            <div class="form-group col-xs-12">
                <div class="col-xs-offset-3 termandcon">
                    <span class="termandcontext">@Html.Raw(HttpUtility.HtmlDecode(@Resource.ActivationTermsAndCondition)) </span>
                    @Html.CheckBox("IsTermAndConditionAccepted", Model.IsTermAndConditionAccepted ? true : false)
                    @Html.ValidationMessageFor(model => model.IsTermAndConditionAccepted)
                </div>
            </div>
            <div class="col-xs-12">
                <div class="col-xs-offset-3 buttons">
                    <input type="submit" value="@Resource.Btn_Activate" class="btn btn-default btn-rect" id="btnsubmit" disabled />
                </div>
            </div>

        }
        else
        {
            ViewBag.HeaderPageTitle = "Home";
            <div class="form-group col-xs-12">

                @Html.LabelFor(model => model.Username, "Student User Name:", htmlAttributes: new { @class = "control-label col-xs-3" })
                <span class="col-xs-9">
                    @Model.Username
                    @Html.HiddenFor(model => model.Username)
                </span>
            </div>

            <div class="form-group col-xs-12">
                @Html.LabelFor(model => model.HomeDevices, "Active Home Devices:", htmlAttributes: new { @class = "control-label col-xs-3" })
                <span class="col-xs-9">
                    @Model.HomeDevices
                    @Html.HiddenFor(model => model.HomeDevices)
                </span>
            </div>
        }
    </div>
}
<style>
    .error {
        color: #FC654C;
        font-size: 12px;
    }

    label.error {
        text-transform: none;
    }
    label {
        float: left;
        padding-top: 1px;
    }
    #div_user {
        height: 31px;
    }
</style>
@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js?v=1"></script>
    <script src="~/Scripts/jquery.validate.js?v=1"></script>
    <script type="text/javascript">
        var IsValidUserName = false;
        $.fn.allchange = function (callback) {
            var me = this;
            var last = "";
            var infunc = function () {
                var text = $(me).val();
                if (text != last) {
                    last = text;
                    callback();
                }
                setTimeout(infunc, 100);
            }
            setTimeout(infunc, 100);
        };
        $(document).ready(function () {
            @if (string.IsNullOrEmpty(Model.RegistrationDate.ToString()))
                     {
                         @Html.Raw("$('footer').css('display', 'none');");
                     }
            if ($('#Username').val().trim() != '')
                $('#Username').addClass('valid');

            if ($('#Password').val().trim() != '')
                $('#Password').addClass('valid');

            if ($('#ConfirmPassword').val().trim() != '')
                $('#ConfirmPassword').addClass('valid');

            if ($('input[name=IsTermAndConditionAccepted]:checked').length > 0) {
                $('input[name=IsTermAndConditionAccepted]').addClass('valid');
            }

            $('#Username_').on('keypress', function (event) {
                if (event.charCode == 32)
                    return false;
                var regex = new RegExp("^[a-zA-Z0-9]+$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);

                if (!regex.test(key) && event.charCode != 46 && event.charCode != 95 && event.charCode != 45 && event.charCode != 64) {//event.charCode != 13 && event.charCode != 46 && event.charCode != 0 && event.which != 95 && event.which != 64) {
                    event.preventDefault();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.Username)").allchange(function () {
                var userName = $("#@Html.FieldIdFor(model => model.Username)").val();
                if (!(userName == '')) {
                    var isUsernameUnique = fnValidateUsername(userName);
                    if (isUsernameUnique === false) {
                        $("#div_user").removeClass("div_userclassunique");
                        $("#div_user").addClass("div_userclassnonunique");
                        $('#uniquusername-error').show();
                        IsValidUserName = false;
                    } else {
                        $("#div_user").addClass("div_userclassunique");
                        $("#div_user").removeClass("div_userclassnonunique");
                        $('#uniquusername-error').hide();
                        IsValidUserName = true;
                    }
                }
                else {
                    $("#div_user").removeClass("div_userclassunique");
                    $("#div_user").removeClass("div_userclassnonunique");
                    $('#uniquusername-error').hide();
                    IsValidUserName = false;
                }
            });

            $.validator.addMethod('validateusername', function (value, element) {
                var expr = /^[a-zA-Z0-9!#$%&'*+\-\/=?^_`{|}~@@]+([.][a-zA-Z0-9!#$%&'*+\-\/=?^_`{|}~@@]+)*$/
                return expr.test(value);
            }, '@Resource.UserRegistration_UsernameLength');

            var thevalidator = $.data($('form')[0], 'validator');

            $("input").on("input blur change keyup", function () {
                $(this).valid();
                if (($('.valid').length > 0 && $('.valid').length < 4) || $('input.error').length > 0 || !IsValidUserName) 
                    $('#btnsubmit').attr('disabled', true);
                else 
                    $('#btnsubmit').attr('disabled', false);
            });
        });

        function fnValidateUsername(userName) {
            var status = false;
            var expr = /^[a-zA-Z0-9!#$%&'*+\-\/=?^_`{|}~@@]+([.][a-zA-Z0-9!#$%&'*+\-\/=?^_`{|}~@@]+)*$/;
            if (expr.test(userName)) {
                jsondata = '{ "Username" : "' + userName + '" }',
                $.ajax({
                    url: '@Url.Action("IsUsernameUnique", "User")' + '?Username=' + userName,
                    type: 'GET',
                    async: false,
                    data: JSON.stringify(jsondata),
                    dataType: 'json',
                    success: function (result) {
                        if (result.Status === true)
                            status = true;
                    },
                    error: function (jqXHR, textStatus, err) {
                        alert(textStatus);
                    }
                });
                return status;
            }
            else {
                $('#Username').addClass('input-validation-error').siblings('.field-validation-error').text('@Resource.UserRegistration_UsernameLength');
            }
        }

        $("form").validate({
            rules: {
                Username: {
                    rangelength: [5, 25],
                    required: true,
                    validateusername: true
                },
                Password: {
                    rangelength: [6, 100],
                    required: true
                },
                ConfirmPassword: {
                    required: true,
                    equalTo: "#Password"
                },
                IsTermAndConditionAccepted: {
                    required: true
                }
            },

            messages: {
                Username: {
                    required: "@Resource.UserRegistration_UsernameReqError",
                    rangelength: "@Resource.UserRegistration_UsernameLength"

                },
                Password: {
                    required: "@Resource.UserRegistration_PasswordReqError",
                    rangelength: "@Resource.StudentRegistration_PwdValidator_Msg"

                },
                ConfirmPassword: {
                    required: "@Resource.UserRegistration_ConfirmPasswordReqError",
                    equalTo: "@Resource.UserRegistration_Password_Confirm_Match"
                },
                IsTermAndConditionAccepted: {
                    required: "@Resource.TermAndConditionError"
                }
            },
            submitHandler: function (form) {
                $(form).find("input[type='submit']").attr('disabled', true);
                $(form).find("input[type='button']").attr('disabled', true);
                form.submit();
            },
            invalidHandler: function (event, validator) {
            }
        });
    </script>
}



